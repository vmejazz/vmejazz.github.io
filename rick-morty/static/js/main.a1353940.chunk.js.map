{"version":3,"sources":["components/main/style.js","components/search-field/style.js","components/search-field/search-field.tsx","components/empty-list/style.js","components/empty-list/empty-list.tsx","components/loading-page/loading-page.tsx","components/card/style.js","components/card/card.tsx","components/list-of-characters/style.js","components/page-buttons/style.js","components/page-buttons/page-buttons.tsx","components/list-of-characters/list-of-characters.tsx","components/list-of-party/style.js","components/list-of-party/list-of-party.tsx","components/main/main.tsx","components/app/app.tsx","index.tsx"],"names":["MainStyled","styled","main","H1Hidden","h1","InputStyled","input","SearchField","props","changeSeachText","type","placeholder","onChange","evt","PInfo","p","EmptyList","LoadingPage","Fragment","style","textAlign","marginTop","fontSize","xmlns","margin","width","height","display","preserveAspectRatio","viewBox","cx","cy","r","fill","stroke","strokeDasharray","strokeWidth","transform","attributeName","dur","keyTimes","repeatCount","values","CardStyled","li","CardImageStyled","img","CardButtonStyled","button","CardTitleStyled","h3","Card","character","choiceCharacter","deletedCard","showCloseButton","id","name","imgUrl","image","onClick","src","alt","stopPropagation","ListOfCharactersStyled","ul","ListButtonStyled","div","ButtonPage","PageButtons","changePageShow","info","next","prev","CHARACTERS","gql","ListOfCharacters","useState","listDeletedCard","setDeletedCard","searchText","pageQuery","cardId","some","item","useQuery","variables","pageShow","loading","error","data","characters","results","map","index","card","key","ListOfPartyStyled","H2Styled","h2","ListOfParty","partyList","EMPTY_RICK","EMPTY_MORTY","Main","setSearchText","rickCard","setRickCard","mortyCard","setMortyCard","setPageShow","debouncedSetSearchText","_","debounce","searchValue","target","value","length","characherInfo","toUpperCase","includes","page","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1353940.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const MainStyled = styled.main`\r\n  max-width: 810px;\r\n  margin: 0 auto;\r\n  margin-top: 140px;\r\n`;\r\n\r\nexport const H1Hidden = styled.h1`\r\n  position: absolute;\r\n\r\n  width: 1px;\r\n  height: 1px;\r\n  margin: -1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n\r\n  white-space: nowrap;\r\n\r\n  border: 0;\r\n\r\n  clip: rect(0 0 0 0);\r\n  clip-path: inset(100%);\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const InputStyled = styled.input`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  height: 80px;\r\n  margin-bottom: 30px;\r\n  padding-left: 27px;\r\n\r\n  font-weight: 300;\r\n  font-size: 30px;\r\n  line-height: 35px;\r\n  font-family: Roboto;\r\n  color: #000000;\r\n  text-transform: uppercase;\r\n  font-style: normal;\r\n\r\n  background: #ffffff;\r\n  border: 1px solid #a0a0a0;\r\n`;\r\n","import * as React from \"react\";\r\nimport { InputStyled } from \"./style\";\r\n\r\ntype SearchFieldProps = {\r\n  changeSeachText: Function;\r\n};\r\n\r\nconst SearchField = (props: SearchFieldProps) => {\r\n  const { changeSeachText } = props;\r\n\r\n  return (\r\n    <div>\r\n      <InputStyled\r\n        type=\"text\"\r\n        placeholder=\"Find your rick\"\r\n        onChange={(evt) => changeSeachText(evt)}\r\n      ></InputStyled>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import styled from \"styled-components\";\r\n\r\nexport const PInfo = styled.p`\r\n  display: block;\r\n  text-align: center;\r\n`;\r\n","import React from \"react\";\r\nimport { PInfo } from \"./style\";\r\n\r\nconst EmptyList = () => {\r\n  return <PInfo>Нет подходящих персонажей</PInfo>;\r\n};\r\n\r\nexport default EmptyList;\r\n","import React from \"react\";\r\n\r\nconst LoadingPage = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <h1 style={{ textAlign: `center`, marginTop: `80px`, fontSize: `22px` }}>\r\n        Происходит поиск персонажей ...\r\n      </h1>\r\n      <div>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          style={{ margin: `auto` }}\r\n          width=\"200\"\r\n          height=\"200\"\r\n          display=\"block\"\r\n          preserveAspectRatio=\"xMidYMid\"\r\n          viewBox=\"0 0 100 100\"\r\n        >\r\n          <circle\r\n            cx=\"50\"\r\n            cy=\"50\"\r\n            r=\"35\"\r\n            fill=\"none\"\r\n            stroke=\"#99adba\"\r\n            strokeDasharray=\"164.93361431346415 56.97787143782138\"\r\n            strokeWidth=\"10\"\r\n            transform=\"rotate(99.747 50 50)\"\r\n          >\r\n            <animateTransform\r\n              attributeName=\"transform\"\r\n              dur=\"1s\"\r\n              keyTimes=\"0;1\"\r\n              repeatCount=\"indefinite\"\r\n              type=\"rotate\"\r\n              values=\"0 50 50;360 50 50\"\r\n            ></animateTransform>\r\n          </circle>\r\n        </svg>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default LoadingPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const CardStyled = styled.li`\r\n  position: relative;\r\n\r\n  width: 180px;\r\n  height: 220px;\r\n  margin-bottom: 30px;\r\n  margin-left: 30px;\r\n  overflow: hidden;\r\n  background-color: gray;\r\n`;\r\n\r\nexport const CardImageStyled = styled.img`\r\n  position: relative;\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background-position: center;\r\n  background-size: auto 100%;\r\n`;\r\n\r\nexport const CardButtonStyled = styled.button`\r\n  position: absolute;\r\n  top: 8px;\r\n  right: 8px;\r\n\r\n  width: 30px;\r\n  height: 30px;\r\n\r\n  background-color: #ffffff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: #ffffff;\r\n\r\n    background-color: red;\r\n\r\n    &:before,\r\n    &::after {\r\n      background-color: white;\r\n    }\r\n  }\r\n\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    top: 8px;\r\n    left: 14px;\r\n    content: \" \";\r\n    height: 14px;\r\n    width: 2px;\r\n    background-color: #333;\r\n  }\r\n\r\n  &:before {\r\n    transform: rotate(45deg);\r\n  }\r\n  &:after {\r\n    transform: rotate(-45deg);\r\n  }\r\n`;\r\n\r\nexport const CardTitleStyled = styled.h3`\r\n  position: absolute;\r\n  bottom: 25px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  text-align: center;\r\n  font-family: Roboto;\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  font-size: 24px;\r\n  line-height: 28px;\r\n\r\n  color: #ffffff;\r\n`;\r\n","import * as React from \"react\";\r\nimport {\r\n  CardStyled,\r\n  CardImageStyled,\r\n  CardButtonStyled,\r\n  CardTitleStyled,\r\n} from \"./style\";\r\n\r\ntype characterProps = {\r\n  id?: number;\r\n  name?: string;\r\n  image?: string;\r\n};\r\n\r\ntype CardProps = {\r\n  character: characterProps;\r\n  choiceCharacter: Function;\r\n  deletedCard: Function;\r\n  showCloseButton: boolean;\r\n};\r\n\r\nconst Card = (props: CardProps) => {\r\n  const { character, choiceCharacter, deletedCard, showCloseButton } = props;\r\n  const { id, name, image: imgUrl } = character;\r\n\r\n  return (\r\n    <CardStyled onClick={() => choiceCharacter(character)}>\r\n      <CardTitleStyled>{name}</CardTitleStyled>\r\n      {imgUrl ? (\r\n        <CardImageStyled src={imgUrl} alt={name}></CardImageStyled>\r\n      ) : null}\r\n      {showCloseButton ? (\r\n        <CardButtonStyled\r\n          onClick={(evt) => {\r\n            evt.stopPropagation();\r\n            return deletedCard(id);\r\n          }}\r\n        ></CardButtonStyled>\r\n      ) : null}\r\n    </CardStyled>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ListOfCharactersStyled = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin: 0;\r\n  margin-bottom: 70px;\r\n  margin-left: -30px;\r\n  padding: 0;\r\n\r\n  list-style: none;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ListButtonStyled = styled.div`\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin-bottom: 70px;\r\n  margin-top: -70px;\r\n`;\r\n\r\nexport const ButtonPage = styled.button`\r\n  width: 100px;\r\n  height: 30px;\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n`;\r\n","import * as React from \"react\";\r\nimport { ListButtonStyled, ButtonPage } from \"./style\";\r\n\r\ntype PageButtonsProps = {\r\n  info: {\r\n    count: number;\r\n    pages: number;\r\n    next: number;\r\n    prev: number;\r\n  };\r\n  changePageShow: Function;\r\n};\r\n\r\nconst PageButtons = (props: PageButtonsProps) => {\r\n  const { changePageShow, info } = props;\r\n  const { next, prev } = info;\r\n\r\n  return (\r\n    <ListButtonStyled>\r\n      {prev ? (\r\n        <ButtonPage onClick={() => changePageShow(prev)}>Prev</ButtonPage>\r\n      ) : null}\r\n      {next ? (\r\n        <ButtonPage onClick={() => changePageShow(next)}>Next</ButtonPage>\r\n      ) : null}\r\n    </ListButtonStyled>\r\n  );\r\n};\r\n\r\nexport default PageButtons;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport EmptyList from \"../empty-list/empty-list\";\r\nimport LoadingPage from \"../loading-page/loading-page\";\r\nimport Card from \"../card/card\";\r\nimport { ListOfCharactersStyled } from \"./style\";\r\nimport PageButtons from \"../page-buttons/page-buttons\";\r\n\r\ntype ListProps = {\r\n  searchText: string;\r\n  pageQuery: number;\r\n  changePageShow: Function;\r\n  choiceCharacter: Function;\r\n};\r\n\r\ntype characterProps = {\r\n  id?: number;\r\n  name?: string;\r\n  image?: string;\r\n};\r\n\r\nconst CHARACTERS = gql`\r\n  query getList($searchText: String!, $pageShow: Int) {\r\n    characters(filter: { name: $searchText }, page: $pageShow) {\r\n      info {\r\n        count\r\n        pages\r\n        next\r\n        prev\r\n      }\r\n      results {\r\n        id\r\n        name\r\n        species\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst ListOfCharacters = (props: ListProps) => {\r\n  const [listDeletedCard, setDeletedCard] = useState([{ id: `` }]);\r\n  const { changePageShow, choiceCharacter, searchText, pageQuery } = props;\r\n\r\n  //* Добавляем карточку в список удаленных\r\n  const deletedCard = (id: string) => {\r\n    let cardId = { id: id };\r\n\r\n    if (!listDeletedCard.some((item) => item.id === id)) {\r\n      setDeletedCard((listDeletedCard) => [...listDeletedCard, cardId]);\r\n    }\r\n  };\r\n\r\n  //* Запрашиваем данные с сервера\r\n  let { loading, error, data } = useQuery(CHARACTERS, {\r\n    variables: {\r\n      searchText: searchText,\r\n      pageShow: pageQuery,\r\n    },\r\n  });\r\n\r\n  if (error) return <EmptyList />;\r\n  if (loading) return <LoadingPage />;\r\n\r\n  let { results: characters, info } = data.characters;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ListOfCharactersStyled>\r\n        {characters.map((item: characterProps, index: number) => {\r\n          if (listDeletedCard.some((card: any) => card.id === item.id)) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Card\r\n              character={item}\r\n              key={index}\r\n              deletedCard={deletedCard}\r\n              choiceCharacter={choiceCharacter}\r\n              showCloseButton={true}\r\n            />\r\n          );\r\n        })}\r\n      </ListOfCharactersStyled>\r\n      <PageButtons info={info} changePageShow={changePageShow} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListOfCharacters;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ListOfPartyStyled = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 0;\r\n  margin-left: -30px;\r\n  padding: 0;\r\n\r\n  list-style: none;\r\n`;\r\n\r\nexport const H2Styled = styled.h2`\r\n  font-family: Roboto;\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n  line-height: 35px;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n`;\r\n","import * as React from \"react\";\r\nimport { ListOfPartyStyled, H2Styled } from \"./style\";\r\nimport Card from \"../card/card\";\r\n\r\ntype ListProps = {\r\n  partyList: Array<Object>;\r\n};\r\n\r\nconst ListOfParty = (props: ListProps) => {\r\n  const { partyList } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <H2Styled>Party</H2Styled>\r\n      <ListOfPartyStyled>\r\n        {partyList.map((item: {}, index: number) => {\r\n          return (\r\n            <Card\r\n              character={item}\r\n              key={index}\r\n              choiceCharacter={() => {}}\r\n              deletedCard={() => {}}\r\n              showCloseButton={false}\r\n            />\r\n          );\r\n        })}\r\n      </ListOfPartyStyled>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListOfParty;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { MainStyled, H1Hidden } from \"./style\";\r\nimport SearchField from \"../search-field/search-field\";\r\nimport ListOfCharacters from \"../list-of-characters/list-of-characters\";\r\nimport ListOfParty from \"../list-of-party/list-of-party\";\r\nimport _ from \"lodash\";\r\n\r\ntype CharacherInfoType = {\r\n  id: number;\r\n  name: string;\r\n  image: string;\r\n};\r\n\r\nconst EMPTY_RICK = {\r\n  id: -2,\r\n  name: \"RICK\",\r\n  image: \"\",\r\n};\r\nconst EMPTY_MORTY = {\r\n  id: -3,\r\n  name: \"MORTY\",\r\n  image: \"\",\r\n};\r\n\r\nconst Main = () => {\r\n  const [searchText, setSearchText] = useState(``);\r\n  const [rickCard, setRickCard] = useState(EMPTY_RICK);\r\n  const [mortyCard, setMortyCard] = useState(EMPTY_MORTY);\r\n  const [pageShow, setPageShow] = useState(1);\r\n\r\n  //* Закладываем задержу на изменение состояния поисковой строки\r\n  const debouncedSetSearchText = _.debounce(setSearchText, 300);\r\n\r\n  //* Устанавливаем в state новый запрос из строки поиска.\r\n  const changeSeachText: Function = (\r\n    evt: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const searchValue = evt.target.value;\r\n    if (searchValue.length > 2) {\r\n      debouncedSetSearchText(searchValue);\r\n      setPageShow(1);\r\n    }\r\n  };\r\n\r\n  //* Проверяем что кликнутая карточка принадлежит Рику или Морти, и обновляем state\r\n  const choiceCharacter: Function = (characherInfo: CharacherInfoType) => {\r\n    if (characherInfo.name.toUpperCase().includes(\"RICK\")) {\r\n      setRickCard(characherInfo);\r\n    }\r\n    if (characherInfo.name.toUpperCase().includes(\"MORTY\")) {\r\n      setMortyCard(characherInfo);\r\n    }\r\n  };\r\n\r\n  //* Меняем страницы отображения\r\n  const changePageShow = (page: number) => {\r\n    setPageShow(page);\r\n  };\r\n\r\n  let partyList = [rickCard, mortyCard];\r\n\r\n  return (\r\n    <MainStyled>\r\n      <H1Hidden>Test page Rick and Morty</H1Hidden>\r\n      <SearchField changeSeachText={changeSeachText} />\r\n      <ListOfCharacters\r\n        searchText={searchText}\r\n        pageQuery={pageShow}\r\n        choiceCharacter={choiceCharacter}\r\n        changePageShow={changePageShow}\r\n      />\r\n      <ListOfParty partyList={partyList} />\r\n    </MainStyled>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Main from \"../main/main\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: new HttpLink({\r\n    uri: \"https://rickandmortyapi.com/graphql\",\r\n  }),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Main />\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/app/app\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}